{"id":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","dependencies":[{"name":"C:\\Stuff\\rogue_js\\package.json","includedInParent":true,"mtime":1653850182000},{"name":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\package.json","includedInParent":true,"mtime":1653850180000},{"name":"./JumpPointFinderBase","loc":{"line":4,"column":34,"index":87},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JPFMoveDiagonallyIfAtMostOneObstacle.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JumpPointFinderBase.js"},{"name":"../core/DiagonalMovement","loc":{"line":5,"column":31,"index":145},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JPFMoveDiagonallyIfAtMostOneObstacle.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\DiagonalMovement.js"}],"generated":{"js":"/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}}],"sources":{"node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js":"/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n"},"lineCount":156}},"error":null,"hash":"769380fc370d7124c18906205be9812e","cacheData":{"env":{}}}