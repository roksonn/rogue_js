{"id":"node_modules/pathfinding/src/core/Grid.js","dependencies":[{"name":"C:\\Stuff\\rogue_js\\package.json","includedInParent":true,"mtime":1653850182000},{"name":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\package.json","includedInParent":true,"mtime":1653850180000},{"name":"./Node","loc":{"line":1,"column":19,"index":19},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Grid.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Node.js"},{"name":"./DiagonalMovement","loc":{"line":2,"column":31,"index":62},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Grid.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\DiagonalMovement.js"}],"generated":{"js":"var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/pathfinding/src/core/Grid.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}}],"sources":{"node_modules/pathfinding/src/core/Grid.js":"var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n"},"lineCount":246}},"error":null,"hash":"4741404f97b20e9ba74ff95e9058f188","cacheData":{"env":{}}}