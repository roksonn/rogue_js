{"id":"node_modules/pathfinding/src/finders/AStarFinder.js","dependencies":[{"name":"C:\\Stuff\\rogue_js\\package.json","includedInParent":true,"mtime":1653850182000},{"name":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\package.json","includedInParent":true,"mtime":1653850180000},{"name":"heap","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\AStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\heap\\index.js"},{"name":"../core/Util","loc":{"line":2,"column":25,"index":60},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\AStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Util.js"},{"name":"../core/Heuristic","loc":{"line":3,"column":25,"index":103},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\AStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Heuristic.js"},{"name":"../core/DiagonalMovement","loc":{"line":4,"column":31,"index":157},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\AStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\DiagonalMovement.js"}],"generated":{"js":"var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pathfinding/src/finders/AStarFinder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}}],"sources":{"node_modules/pathfinding/src/finders/AStarFinder.js":"var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n"},"lineCount":127}},"error":null,"hash":"435333322d2aa4a4c3377a7fdc5dc599","cacheData":{"env":{}}}