{"id":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","dependencies":[{"name":"C:\\Stuff\\rogue_js\\package.json","includedInParent":true,"mtime":1653850182000},{"name":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\package.json","includedInParent":true,"mtime":1653850180000},{"name":"heap","loc":{"line":4,"column":25,"index":78},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JumpPointFinderBase.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\heap\\index.js"},{"name":"../core/Util","loc":{"line":5,"column":25,"index":113},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JumpPointFinderBase.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Util.js"},{"name":"../core/Heuristic","loc":{"line":6,"column":25,"index":156},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JumpPointFinderBase.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Heuristic.js"},{"name":"../core/DiagonalMovement","loc":{"line":7,"column":31,"index":210},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\JumpPointFinderBase.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\DiagonalMovement.js"}],"generated":{"js":"/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pathfinding/src/finders/JumpPointFinderBase.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}}],"sources":{"node_modules/pathfinding/src/finders/JumpPointFinderBase.js":"/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n"},"lineCount":115}},"error":null,"hash":"459bb428d914f81ceadfa6acca25f2d2","cacheData":{"env":{}}}