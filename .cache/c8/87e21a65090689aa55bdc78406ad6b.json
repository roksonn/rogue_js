{"id":"node_modules/pathfinding/src/finders/IDAStarFinder.js","dependencies":[{"name":"C:\\Stuff\\rogue_js\\package.json","includedInParent":true,"mtime":1653850182000},{"name":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\package.json","includedInParent":true,"mtime":1653850180000},{"name":"../core/Util","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\IDAStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Util.js"},{"name":"../core/Heuristic","loc":{"line":2,"column":25,"index":68},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\IDAStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Heuristic.js"},{"name":"../core/Node","loc":{"line":3,"column":25,"index":116},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\IDAStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\Node.js"},{"name":"../core/DiagonalMovement","loc":{"line":4,"column":31,"index":165},"parent":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\finders\\IDAStarFinder.js","resolved":"C:\\Stuff\\rogue_js\\node_modules\\pathfinding\\src\\core\\DiagonalMovement.js"}],"generated":{"js":"var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/pathfinding/src/finders/IDAStarFinder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}}],"sources":{"node_modules/pathfinding/src/finders/IDAStarFinder.js":"var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n"},"lineCount":210}},"error":null,"hash":"a2c425648108b44f4282ad752dbbb420","cacheData":{"env":{}}}